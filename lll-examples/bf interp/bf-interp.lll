/*
* This is a BrainFuck interpreter written in Langlanglang meant only to show
* examples features of the Langlanglang language.
*
* This interpreter has only been tested with the *.bf files in this directory
*
*/

// Make these C functions available
foreign func exit(code: int);
foreign func getchar() -> i32;
foreign func Sleep(dura: i32);

struct Vector {
    Capacity: size;
    Length: size;
    Array: int*;
}

// Constructor for the Vector struct
extend Vector(this) {
    this.Capacity = 8;
    this.Length = 0;
    this.Array = new int[this.Capacity];
    for i in 0..this.Capacity-1 {
        this.Array[i] = 0;
    }
}

// Destructor for the vector class, invoked when you 'delete' a Vector
extend ~Vector(this) {
    this.Capacity = 0;
    this.Length = 0;
    delete this.Array;
}

// Append an to the end of the vector
extend Vector PushBack(this, item: int) {
    if this.Length + 1 >= this.Capacity {
        this.Resize(this.Capacity * 2);
    }
    this.Array[this.Length] = item;
    this.Length = this.Length + 1;
}


// Invoked from 'vector[integer]'
extend Vector __index__(this, idx: size) -> ref int {
    if idx >= this.Capacity {
        printf("vector array bounds check failed, exiting...\n");
        exit(1);
    }
    return this.Array[idx];
}

// Inoked from 'vector << integer'
extend Vector __lshift__(this, item: int) -> Vector* {
    this.PushBack(item);
    return this;
}

// Inoked from 'vector >> integer'
extend Vector __rshift__(this, dest: ref int) -> Vector* {
    dest = this.PopBack();
    return this;
}

// Removes and returns the last element in the vector
extend Vector PopBack(this) -> int {
    tmp := this.Array[this.Length - 1];
    this.Array[this.Length - 1] = 0;
    this.Length = this.Length - 1;
    return tmp;
}

// Resizes the vector
extend Vector Resize(this, newSize: size) {
    newArray : int* = alloc(newSize * sizeof(int));
    limit := min(this.Length, newSize);
    for i := 0; i < limit; i = i + 1 {
        newArray[i] = this.Array[i];
    }
    tmp := this.Array;
    this.Array = newArray;
    this.Capacity = newSize;
    this.Length = limit;
    delete tmp;
}

// returns the last element in the vector
extend Vector Peek(this) -> i32 {
    n := this[this.Length - 1];
    return n;
}

// A generic function that takes two of the same types and
// returns either one based on the result of 'x.__lt__(y)'
func min(x: #T, y: #T) -> T {
    if x < y {
        return x;
    }
    return y;
}

struct FixedArray_i8 {
    Length: size;
    Array: i8*;
}

extend FixedArray_i8(this, n: size) {
    this.Length = n;
    this.Array = new i8[n];
    for i in 0..this.Length-1 {
        this.Array[i] = 0;
    }
}
extend FixedArray_i8 __index__(this, idx: size) -> ref i8 {
    if idx >= this.Length {
        printf("fixed array(i8) bounds check failed, exiting...\n");
        exit(-1);
    }
    return this.Array[idx];
}

struct BfMachine {
    PC: int;               // program counter for the BF machine
    DP: int;               // data pointer for the BF machine
    DPMax: int;            // furthest to the right the DP has been (used for debugging)
    Data: FixedArray_i8*;  // data cells of the BF machine
    JmpTable: Vector*;     // lookup table for the '[' and ']' instructions
    Code: Vector*;         // code to execute
}

extend BfMachine(this, n: size) {
    this.PC = 0; 
    this.DP = 0; 
    this.DPMax = 0; 
    this.Data = new FixedArray_i8(n);
    this.JmpTable = 0;
    this.Code = 0;
}

// Reads input from stdin (getchar) and stores any valid
// BrainFuck instructions in a vector. This also creates
// a jump table for the corresponding '[' and ']'
// This also implements a basic system to check for
// mismatching '[' and ']'
extend BfMachine ReadInput(this) {
    jmpStack := new Vector();
    jmps := new Vector();
    code := new Vector();
    i := 0;
    while 1 {
        // this could easily be adapted to read from a file
        // but for simplicity, I chose to use stdin
        c := getchar();
        if c == -1 {
            code << 0;
            if jmpStack.Length != 0 {
                printf("mismatched '[', exiting...");
                exit(-1);
            }
            if this.Code {
                delete this.Code;
            }
            if this.JmpTable {
                delete this.JmpTable;
            }
            this.Code = code;
            this.JmpTable = jmps;
            return;
        }
        if strCont(c, 8, "<>+-.,[]") {
            // appending
            code << c;
            jmps << 0;
            if c == "["[0] {
                //printf("[ @ %d\n", i);
                jmpStack << i;
            }
            else if c == "]"[0] {
                if jmps.Length < 1 {
                    printf("mismatched ']', exiting...");
                    exit(-1);
                }
                tmp := jmpStack.PopBack();
                jmps[i] = tmp;
                jmps[tmp] = i;
                //printf("] @ %d -- %d<->%d\n", i, tmp, i);
            }
            i = i + 1;
        }
    }
}

// Helper function to check if a string contains a character.
func strCont(c: char, n: size, str: char*) -> bool {
    for i in 0..n-1 {
        if str[i] == c {
            return 1;
        }
    }
    return 0;
}

// the ">" instruction
extend BfMachine IncDp(this) {
    this.DP = this.DP + 1;
    if this.DP > this.DPMax {
        this.DPMax = this.DP;
    }
    this.PC = this.PC + 1;
}

// the "+" instruction
extend BfMachine IncAtDp(this) {
    this.Data[this.DP] = this.Data[this.DP] + 1;
    this.PC = this.PC + 1;
}

// the "<" instruction
extend BfMachine DecDp(this) {
    this.DP = this.DP - 1;
    this.PC = this.PC + 1;
}

// the "-" instruction
extend BfMachine DecAtDp(this) {
    this.Data[this.DP] = this.Data[this.DP] - 1;
    this.PC = this.PC + 1;
}

// the "." instruction
extend BfMachine Output(this) {
    printf("%c", this.Data[this.DP]);
    this.PC = this.PC + 1;
}

// the "," instruction
extend BfMachine Input(this) {
    this.Data[this.DP] = getchar();
    this.PC = this.PC + 1;
}

// the "[" instruction
extend BfMachine JmpF(this) {
    if this.Data[this.DP] == 0 {
        this.PC = this.JmpTable[this.PC];
    }
    this.PC = this.PC + 1;
}

// the "]" instruction
extend BfMachine JmpB(this) {
    if this.Data[this.DP] != 0 {
        this.PC = this.JmpTable[this.PC];
    }
    else {
        this.PC = this.PC + 1;
    }
}

// Fetches the current instruction with the option of displaying
// debug info about the current instruction and data cells.
extend BfMachine Fetch(this, debug: bool, delay: i32) -> i32 {
    if debug {
        Sleep(delay);
        printf("==========DBG_DUMP==========\n");
        this.PrintIns();
        this.PrintData();
    }
    if this.Code {
        ins_123 := this.Code[this.PC];
        return ins_123;
    }
    return 0;
}

extend BfMachine PrintIns(this) {
    printf("PC: %d -> %d (%c)\n", this.PC, this.Code[this.PC], this.Code[this.PC]);
}

extend BfMachine PrintData(this) {
    printf("DP: %d -> ", this.DP);
    for i in 0..this.DPMax {
        if this.DP == i {
            printf("'");
        }
        printf("%d ", this.Data[i]);
    }
    printf("\n");
}

// The main loop of the interpreter to dispatch each instruction
extend BfMachine Run(this, dbg: bool, delay: i32) {
    while 1 {
        ins := this.Fetch(dbg, delay);
        if ins == 0 {
            return;
        }
        if ins == ">"[0] {
            this.IncDp();
        }
        else if ins == "<"[0] {
            this.DecDp();
        }
        else if ins == "+"[0] {
            this.IncAtDp();
        }
        else if ins == "-"[0] {
            this.DecAtDp();
        }
        else if ins == "."[0] {
            this.Output();
        }
        else if ins == ","[0] {
            this.Input();
        }
        else if ins == "["[0] {
            this.JmpF();
        }
        else if ins == "]"[0] {
            this.JmpB();
        }
        else {
            this.PC = this.PC + 1;
        }
    }
}

// Dumps the code read in from stdin
extend BfMachine DumpCode(this) {
    for i in 0..this.Code.Length-1 {
        printf("%c", this.Code[i]);
    }
    printf("\n");
}


bf := new BfMachine(65000);
bf.ReadInput();
//bf.DumpCode();
bf.Run(0, 750);
